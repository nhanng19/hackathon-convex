import { Id } from "@/convex/_generated/dataModel";
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const mapToStringArray = (options : any, values : any) => {
  return options.filter((option : any) => values.includes(option.name));
};

export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

export const convertEpoch = (time: number) => {
  const date = new Date(time)
  return date.toLocaleString()
}

export const getBorderStyle = (exitX: number) => {
    if (exitX > 0) {
      return {
        boxShadow: `rgba(0, 255, 0, 0.4) 0px 5px, rgba(0, 255, 0, 0.3) 0px 10px, rgba(0, 255, 0, 0.2) 0px 15px, rgba(0, 255, 0, 0.1) 0px 20px, rgba(0, 255, 0, 0.05) 0px 25px`,
      };
    } else if (exitX < 0) {
      return {
        boxShadow: `rgba(255, 0, 0, 0.4) 0px 5px, rgba(255, 0, 0, 0.3) 0px 10px, rgba(255, 0, 0, 0.2) 0px 15px, rgba(255, 0, 0, 0.1) 0px 20px, rgba(255, 0, 0, 0.05) 0px 25px`,
      };
    } else {
      return {};
    }
  };

export const getMatchee = (pair : any[], userId : Id<"user"> | null) => {
  const matchee = pair.filter((user) => user.id !== userId);
  return matchee[0];
}

export const  xorHash = (str1: any, str2: any) => {
  const maxLength = Math.max(str1.length, str2.length);
  const paddedStr1 = str1.padEnd(maxLength, " ");
  const paddedStr2 = str2.padEnd(maxLength, " ");
  let hash = "";
  for (let i = 0; i < maxLength; i++) {
    const charCode1 = paddedStr1.charCodeAt(i);
    const charCode2 = paddedStr2.charCodeAt(i);
    const xorResult = charCode1 ^ charCode2;
    const hexString = xorResult.toString(16).padStart(2, "0");
    hash += hexString;
  }
  return hash;
}

export function isUserOnline(epochTime: number) {
  const currentTime = Date.now();
  const timeDifference = currentTime - epochTime * 1000;
  return timeDifference <= 10000;
}